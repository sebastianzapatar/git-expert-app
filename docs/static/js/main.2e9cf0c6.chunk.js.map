{"version":3,"sources":["components/AddCategory.js","components/gifGridItem.js","components/GifGrid.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","mensaje","setMensaje","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","GifGridItem","id","title","url","className","src","alt","GifGrid","category","images","setImages","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","downsized_medium","useEffect","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAEaA,EAAY,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EACVC,mBAAS,cADC,mBACjCC,EADiC,KACxBC,EADwB,KAaxC,OACI,qCACA,mDACA,sBAAMC,SAVS,SAACC,GAChBA,EAAEC,iBACCJ,EAAQK,OAAOC,OAAO,GACrBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAcO,QAOpC,SACI,uBACAC,KAAK,OACLC,MAAOT,EACPU,SAlBM,SAACP,GACXQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAWE,EAAEU,OAAOJ,gB,+BCJfK,EAAY,SAAC,GAAiB,EAAhBC,GAAiB,IAAdC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,IAEhC,OAEI,sBAAKC,UAAU,OAAf,UAEI,qBAAKC,IAAKF,EAAKD,MAAOA,EAAOI,IAAKJ,IAClC,4BAAIA,QCPHK,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACTvB,mBAAS,IADA,mBAC9BwB,EAD8B,KACtBC,EADsB,KAE/BC,EAAO,uCAAG,oCAAAC,EAAA,6DACNT,EADM,0FACmFU,UAAUL,GAD7F,sBAEOM,MAAMX,GAFb,cAENY,EAFM,gBAGWA,EAAKC,OAHhB,gBAGJC,EAHI,EAGJA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHnB,GAAImB,EAAInB,GACRC,MAAOkB,EAAIlB,MACXC,IAAG,UAAEiB,EAAIX,cAAN,aAAE,EAAYY,iBAAiBlB,QAI1CN,QAAQC,IAAIoB,GACZR,EAAUQ,GAfE,4CAAH,qDAoBb,OAHAI,qBAAU,WACNX,MACF,IAEE,qCACA,6BAAKH,IACL,qBAAKJ,UAAU,WAAf,SAEI,6BACKK,EAAOU,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAInB,eC5BhBsB,EAAe,WAAM,MAEGtC,mBAAS,CAAC,cAFb,mBAEvBuC,EAFuB,KAEZxC,EAFY,KAI9B,OACI,qCACI,8CAEA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEIwC,EAAWL,KAAI,SAAAX,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCbzBiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2e9cf0c6.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n\r\nexport const AddCategory=({setCategories})=>{\r\n    const [mensaje, setMensaje] = useState('Hola mundo')\r\n    const cambiar=(e)=>{\r\n        console.log(e.target.value);\r\n        setMensaje(e.target.value);\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();//Para evitar que se mande el archivo\r\n        if(mensaje.trim().length>2){\r\n            setCategories(cats=>[mensaje,...cats])\r\n        }\r\n        \r\n    }\r\n    return(\r\n        <>\r\n        <h2>Agregar categoria</h2>\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\" \r\n            value={mensaje}\r\n            onChange={cambiar}\r\n            />\r\n        </form>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport const GifGridItem=({id,title,url})=>{\r\n    \r\n    return(\r\n        \r\n        <div className=\"card\">\r\n            \r\n            <img src={url} title={title} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GifGridItem } from './gifGridItem';\r\nexport const GifGrid = ({ category }) => {\r\n    const [images, setImages] = useState([]);\r\n    const getGifs = async () => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=nabEvNFal0I2DuN6XHyuNwHxn9yvKcn1&q=${encodeURI(category)}&limit=10`;\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n        \r\n        \r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n\r\n        })\r\n        console.log(gifs);\r\n        setImages(gifs)   ;\r\n    }\r\n    useEffect(()=>{\r\n        getGifs()\r\n    },[])\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        <div className=\"cardGrid\">\r\n            \r\n            <ol>\r\n                {images.map(img=>(\r\n                    <GifGridItem\r\n                    key={img.id}\r\n                    {...img} />\r\n                ))}\r\n            </ol>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}","import React,{useState} from 'react';\r\nimport {AddCategory} from './AddCategory';\r\nimport {GifGrid} from './GifGrid';\r\n\r\nexport const GitExpertApp = () => {\r\n    //let categories=['one punch','dragon ball','Samurai x']\r\n    const [categories,setCategories]=useState(['one punch']);\r\n    \r\n    return(\r\n        <>\r\n            <h2>GitExpertApp</h2>\r\n            \r\n            <hr/>\r\n            <AddCategory setCategories={setCategories}></AddCategory>\r\n            <ol>\r\n            {\r\n                categories.map(category => (\r\n                    <GifGrid \r\n                    key={category}\r\n                    category={category}\r\n                    ></GifGrid>\r\n                ))\r\n            }\r\n           \r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GitExpertApp} from './components/GifExpertApp'\n\nReactDOM.render(\n  <GitExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}